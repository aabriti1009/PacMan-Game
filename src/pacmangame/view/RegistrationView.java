/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pacmangame.view;

import java.awt.Color;
import pacmangame.Controller.RegistrationController;

/**
 *
 * @author ACER
 */
public class RegistrationView extends javax.swing.JFrame {

    // Add missing fields for password visibility buttons
    private javax.swing.JLabel showPasswordBtn;
    private javax.swing.JLabel showConfirmPasswordBtn;
    // Add controller field
    private RegistrationController registrationController;
   
    /**
     * Creates new form RegistrationView
     */
    public RegistrationView() {
        initComponents();
        
        // Set window size to 1000x600 and center it on screen
        setSize(1000, 600);
        setLocationRelativeTo(null);
        
        // Set transparent backgrounds
        usernametextfield.setBackground(new Color(0,0,0,0));
        emailtextfield.setBackground(new Color(0,0,0,0));
        passwordtextfield.setBackground(new Color(0,0,0,0));
        confirmpasswordtextfield.setBackground(new Color(0,0,0,0));
        
        // Set password fields
        passwordtextfield.setEchoChar('\u0000');  // Initially show placeholder
        confirmpasswordtextfield.setEchoChar('\u0000');  // Initially show placeholder
        confirmpasswordtextfield.setText("Confirm your password");
        
        // Setup show/hide password functionality
        setupPasswordVisibility();
        
        // Setup register button action
        setupRegisterButton();
        
        // Initialize controller
        registrationController = new RegistrationController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        joingame = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernametextfield = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        emailtextfield = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordtextfield = new javax.swing.JPasswordField();
        confirmPasswordLabel = new javax.swing.JLabel();
        confirmpasswordtextfield = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        userimg = new javax.swing.JLabel();
        emailimg = new javax.swing.JLabel();
        passwordimg = new javax.swing.JLabel();
        confirmimg = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Enter Your Password");

        joingame.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        joingame.setForeground(new java.awt.Color(255, 255, 255));
        joingame.setText("Join The Game");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("UserName");

        usernametextfield.setText("Enter Your username");
        usernametextfield.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        usernametextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernamefocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernamefocuslost(evt);
            }
        });
        usernametextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernametextfieldActionPerformed(evt);
            }
        });

        emailLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        emailLabel.setText("Email");

        emailtextfield.setText("Enter Your email");
        emailtextfield.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        emailtextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                emailfocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailfocuslost(evt);
            }
        });
        emailtextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailtextfieldActionPerformed(evt);
            }
        });

        passwordLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        passwordLabel.setText("Password");

        passwordtextfield.setText("Enter your password");
        passwordtextfield.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        passwordtextfield.setEchoChar('\\');
        passwordtextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordfocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordfocuslost(evt);
            }
        });
        passwordtextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordtextfieldActionPerformed(evt);
            }
        });

        confirmPasswordLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password");

        confirmpasswordtextfield.setText("Confirm your password");
        confirmpasswordtextfield.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        confirmpasswordtextfield.setEchoChar('\\');
        confirmpasswordtextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                confirmpasswordfocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                confirmpasswordfocuslost(evt);
            }
        });
        confirmpasswordtextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmpasswordtextfieldActionPerformed(evt);
            }
        });

        userimg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagepicker/img/profile-user (1) (1).png"))); // NOI18N

        emailimg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        emailimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagepicker/img/email (1).png"))); // NOI18N

        passwordimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagepicker/img/lock (1) (1).png"))); // NOI18N

        confirmimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagepicker/img/lock (1) (1).png"))); // NOI18N

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton1.setText("Register");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(confirmPasswordLabel)
                            .addComponent(emailLabel)
                            .addComponent(passwordLabel))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwordimg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(passwordtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(emailimg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(emailtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmimg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confirmpasswordtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userimg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernametextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(676, 676, 676)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(619, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(412, 412, 412))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(joingame, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(392, 392, 392))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(joingame)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailimg)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(userimg)
                            .addComponent(usernametextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailLabel)
                            .addComponent(emailtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordimg)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passwordLabel)
                        .addComponent(passwordtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(confirmPasswordLabel)
                        .addComponent(confirmpasswordtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(confirmimg, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jButton1)
                .addGap(51, 51, 51)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernamefocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernamefocus
        if (usernametextfield.getText().equals("Enter Your username")) {
            usernametextfield.setText("");
            usernametextfield.setForeground(Color.black);
        }
    }//GEN-LAST:event_usernamefocus

    private void usernamefocuslost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernamefocuslost
        if (usernametextfield.getText().isEmpty()){
            usernametextfield.setText("Enter Your username");
            usernametextfield.setForeground(Color.black);
        }
    }//GEN-LAST:event_usernamefocuslost

    private void usernametextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernametextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernametextfieldActionPerformed

    private void emailfocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailfocus
        if (emailtextfield.getText().equals("Enter Your email")) {
            emailtextfield.setText("");
            emailtextfield.setForeground(Color.black);
        }
    }//GEN-LAST:event_emailfocus

    private void emailfocuslost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailfocuslost
        if (emailtextfield.getText().isEmpty()){
            emailtextfield.setText("Enter Your email");
            emailtextfield.setForeground(Color.black);
        }
    }//GEN-LAST:event_emailfocuslost

    private void emailtextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailtextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailtextfieldActionPerformed

    private void passwordfocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordfocus
        String password = new String(passwordtextfield.getPassword());
        if (password.equals("Enter your password")) {
            passwordtextfield.setText("");
            passwordtextfield.setEchoChar('•');
            passwordtextfield.setForeground(Color.black);
            // Update show button to hide icon since password is now hidden
            showPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/show (1).png")));
        }
    }//GEN-LAST:event_passwordfocus

    private void passwordfocuslost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordfocuslost
        String password = new String(passwordtextfield.getPassword());
        if (password.isEmpty()) {
            passwordtextfield.setEchoChar('\u0000');
            passwordtextfield.setText("Enter your password");
            passwordtextfield.setForeground(Color.black);
            // Update show button to show icon since placeholder is visible
            showPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/show (1).png")));
        }
    }//GEN-LAST:event_passwordfocuslost

    private void passwordtextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordtextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordtextfieldActionPerformed

    private void confirmpasswordfocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_confirmpasswordfocus
        String confirmpassword = new String(confirmpasswordtextfield.getPassword());
        if (confirmpassword.equals("Confirm your password")) {
            confirmpasswordtextfield.setText("");
            confirmpasswordtextfield.setEchoChar('•');
            confirmpasswordtextfield.setForeground(Color.black);
            // Update show button to hide icon since password is now hidden
            showConfirmPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/show (1).png")));
        }
    }//GEN-LAST:event_confirmpasswordfocus

    private void confirmpasswordfocuslost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_confirmpasswordfocuslost
        String confirmpassword = new String(confirmpasswordtextfield.getPassword());
        if (confirmpassword.isEmpty()) {
            confirmpasswordtextfield.setEchoChar('\u0000');
            confirmpasswordtextfield.setText("Confirm your password");
            confirmpasswordtextfield.setForeground(Color.black);
            // Update show button to show icon since placeholder is visible
            showConfirmPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/show (1).png")));
        }
    }//GEN-LAST:event_confirmpasswordfocuslost

    private void confirmpasswordtextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmpasswordtextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confirmpasswordtextfieldActionPerformed

    private void setupPasswordVisibility() {
        // Create show/hide password buttons
        showPasswordBtn = new javax.swing.JLabel();
        showConfirmPasswordBtn = new javax.swing.JLabel();
        
        // Set initial icons (show password icons)
        showPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/show (1).png")));
        showConfirmPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/show (1).png")));
        
        // Make them clickable
        showPasswordBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showConfirmPasswordBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        
        // Set preferred size for the buttons
        showPasswordBtn.setPreferredSize(new java.awt.Dimension(20, 20));
        showConfirmPasswordBtn.setPreferredSize(new java.awt.Dimension(20, 20));
        
        // Add click listeners
        showPasswordBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                togglePasswordVisibility();
            }
        });
        
        showConfirmPasswordBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toggleConfirmPasswordVisibility();
            }
        });
        
        // Add buttons to the content pane
        getContentPane().add(showPasswordBtn);
        getContentPane().add(showConfirmPasswordBtn);
        
        // Position the buttons after layout is complete
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                positionPasswordButtons();
            }
        });
    }
    
    private void togglePasswordVisibility() {
        if (passwordtextfield.getEchoChar() == '•') {
            // Currently hidden, show password
            passwordtextfield.setEchoChar('\u0000');
            showPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/eye (1).png")));
        } else {
            // Currently shown, hide password
            passwordtextfield.setEchoChar('•');
            showPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/show (1).png")));
        }
    }
    
    private void toggleConfirmPasswordVisibility() {
        if (confirmpasswordtextfield.getEchoChar() == '•') {
            // Currently hidden, show password
            confirmpasswordtextfield.setEchoChar('\u0000');
            showConfirmPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/eye (1).png")));
        } else {
            // Currently shown, hide password
            confirmpasswordtextfield.setEchoChar('•');
            showConfirmPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("imagepicker/img/show (1).png")));
        }
    }

    private void positionPasswordButtons() {
        // Position buttons next to password fields
        int passwordX = passwordtextfield.getX() + passwordtextfield.getWidth() + 5;
        int passwordY = passwordtextfield.getY() + (passwordtextfield.getHeight() - 20) / 2;
        
        int confirmX = confirmpasswordtextfield.getX() + confirmpasswordtextfield.getWidth() + 5;
        int confirmY = confirmpasswordtextfield.getY() + (confirmpasswordtextfield.getHeight() - 20) / 2;
        
        showPasswordBtn.setBounds(passwordX, passwordY, 20, 20);
        showConfirmPasswordBtn.setBounds(confirmX, confirmY, 20, 20);
        
        // Ensure buttons are visible
        showPasswordBtn.setVisible(true);
        showConfirmPasswordBtn.setVisible(true);
        showPasswordBtn.repaint();
        showConfirmPasswordBtn.repaint();
    }

    private void setupRegisterButton() {
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleRegisterButtonClick();
            }
        });
    }
    
    private void handleRegisterButtonClick() {
        // Get values from form fields
        String username = usernametextfield.getText();
        String email = emailtextfield.getText();
        String password = new String(passwordtextfield.getPassword());
        String confirmPassword = new String(confirmpasswordtextfield.getPassword());
        // Handle placeholder text
        if (username.equals("Enter Your username")) {
            username = "";
        }
        if (email.equals("Enter Your email")) {
            email = "";
        }
        if (password.equals("Enter your password")) {
            password = "";
        }
        if (confirmPassword.equals("Confirm your password")) {
            confirmPassword = "";
        }
        // Check if all fields are empty
        if (username.isEmpty() && email.isEmpty() && password.isEmpty() && confirmPassword.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Registration failed: Missing required information.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Check for individual empty fields
        if (username.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Username cannot be empty", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (email.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Email cannot be empty", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (password.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Password cannot be empty", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (confirmPassword.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Confirm Password cannot be empty", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Validate password match
        if (!password.equals(confirmPassword)) {
            javax.swing.JOptionPane.showMessageDialog(this, "Passwords do not match!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Use controller for registration
        boolean success = registrationController.registerUser(username, email, password);
        if (success) {
            javax.swing.JOptionPane.showMessageDialog(this, "Registration successful!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            clearForm();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, registrationController.getLastError(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void clearForm() {
        usernametextfield.setText("Enter Your username");
        emailtextfield.setText("Enter Your email");
        passwordtextfield.setText("Enter your password");
        confirmpasswordtextfield.setText("Confirm your password");
        passwordtextfield.setEchoChar('\u0000');
        confirmpasswordtextfield.setEchoChar('\u0000');
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrationView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JLabel confirmimg;
    private javax.swing.JPasswordField confirmpasswordtextfield;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailimg;
    private javax.swing.JTextField emailtextfield;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JLabel joingame;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel passwordimg;
    private javax.swing.JPasswordField passwordtextfield;
    private javax.swing.JLabel userimg;
    private javax.swing.JTextField usernametextfield;
    // End of variables declaration//GEN-END:variables
}
